
* Rails has always been preconfigured to include three standard modes:
    * Developement
    * Test
    * Production
* It’s also possible to create you own custom environments
* RAILS_ENV can be used to determine the current environment
* The most fundamental aspect of a Rails app is its list of external libraries it depends on
    * Bundler is a tool that is used to manage RubyGem dependencies for Rails
    * Takes a manifest file as input and is able to fetch, download, and install the gems that are listed in the manifest


1.1 Bundler

* One of the most important thing Bundler does is dependent resolution on the fill list of gems specified In your configuration, all at once.
    * Different from the “one-at-a-time” dependency approach employed by previous versions of Rails
* Bundler will often solve dependency issues by evaluating dependencies all at once and figuring out the exact right versions of gems to load.

1.1.1 Gemfile

* It is the root of the Rails project directory
* No filename extension
* Specifies all dependencies of the Rails app, including the version of Rails being used
* It is possible to load a dependency for a specific environment by placing it in a group block and specifying one or more environment names as symbols

group :development do
    gem ‘byebug’
end

group :test do
    gem ‘capybara’
    gem ‘database_cleaner’
end

group :development, :test do
    gem ‘rspec-rails’
    gem ‘factory_bot_rails’
end

* The ‘gem’ directive can take an optional second argument that will specify the version of the RubyGem desired
    * Leaving the version off will get the latest available stable version, which may or may not be the latest version
    * Using the :require option solves declaring the gem directly in the Gemfile
        * ~> will install any gem with a minor update 1.0.X
        * >= will install any gem above specified version 

1.1.1.1 Loading Gems Directly from a Git Repository

* Most gem are loaded from https://rubygems.org but it is possible to specify a gem by its source repository as long as it has a .gemspec file in the root directory
    * Just add a :git option

gem ‘carrierwave’, git: ‘git@github.com:carrierwaveuploader/carrierwave.git'

* If the gem source repo is hosted on GitHub and is public, you can use the :GitHub shorthand

gem ‘carrierwave’, github: ‘carrierwaveuploader/carrierwave'

* If there is no .gemspec file, you must tell Bundler which version to use when resolving dependencies

gem ‘deep_merge’, ‘1.0’, git: ‘git://github.com/peritor/deep_merge.git'

* Additionally, you can specify that a git repo should use a particular ref, branch, or tag as options to the git directive

git ‘git://github.com/rails/rails.git',
    ref: ‘4aded’

git ‘git://github.com/rails/rails.git',
    branch: ‘3-2-stable’

git ‘git://github.com/rails/rails.git',
    tag: ‘v3.2.11'
    
1.1.2 Installing Gems

* Every time you modify the Gemfile or if you introduce dependencies not yet installed, use the bundle install (bundle) command to ensure all dependencies are resolved for your application
* Using the install command updates all dependencies in your Gemfile to the latest versions that do not conflict with other dependencies. This command is invoked automatically when creating a new Rails app.
* The first time you run bundle install, no Gemfile.lock exists yet. Bundler will fetch all remote sources, then resolve dependencies, then install needed gems
* Rerunning bundle install without updating the Gemfile will cause Bundler to re-fetch all remote sources, but then use the dependencies specified in the Gemfile.lock instead of resolving dependencies again. Typically, this doesn’t change anything with your Rails configuration
* Lastly, and most commonly, is that the Gemfile.lock exists, and you update your Gemfile by adding or modifying a dependency. When rerunning bundle install, the dependencies specified in the Gemfile.lock will be used for the gems that did not change, but dependencies will be resolved for any gems that were updated

1.1.3 Gem Locking

* Every time you run bundle install or bundle update, Bundler calculates the dependency tree for your application and stores the result in a file called Gemlock.file
* Once this file is created, Bundler will only load specific versions of Gems that you were using the moment the Gemfile.lock was created
* The idea is that you lock your configuration down to using versions of dependencies that you know will work well with your application
* It is IMPORTANT that the Gemfile.lock is checked into version control to ensure that every machine running the application uses the exact same version of gem

1.1.4 Packaging Gems

* It is possible to package your gems in vendor/cache directory inside of your Rails app

$ bundle package

* Running the bundle install —local in an application with packed gems will use the gems in the package and skip connecting to rubygems.org or any other gem sources
    * You can use this to avoid external dependencies at the time of reply or if you depend on private gems that are not available in any public repositories

1.1.5 Binstubs

* Bootstrapping or creating a new Rails app will result in the creation of binstubs for Rails executables, located in the bin folder.
* A binstub is a script containing an executable that runs in the context of the bundle.
    * This means that you do not need to prefix bundle exec each time a Rails specific executable is invoked or used
    * You will still need to use bundle exec when using non-Rails scripts to get a properly initialized RubyGems environment
* You can add a binstub of a commonly used executable or command in your bundle by using:

$ bundle binstubs some-gem-name

Ex:
$ bundle binstubs guard

* http://www.singhajit.com/why-arent-you-using-binstubs-yet/
* https://mislav.net/2013/01/understanding-binstubs/

1.2 Startup Scripts

* ​There are a series of files that are loaded in a specific order whenever you start a rails server (or start a process that handles requests)
* One of the first thing that happens is the config/boot.rb file is loaded
* There are three files involved in setting up the Rails app
    * config/environment.rb - This file loads application.rb, then runs the initializer scripts
    * config/boot.rb - This file is required by  application.rb to set up Bundler and load paths for RubyGems
    * config/application.rb - This file contains the meat of the configuration. This script loads the Ruby on Rails gems and gems for the specified Rails.env and configures the application
        * Any changes to these files will require a server restart to take effect
        * require_relative ‘boot’ - loads the boot script
        * require ‘rails/all’ - loads all of the Rails gems
            * By replacing this line, you can cherry-pick only the components needed by your application

1.3 Default Initializers

* This directory contains a set of initializer scripts that are only loaded when the server starts up
    * Any changes made to these files will require a server restart

1.3.1 config/initializer/application_controller_renderer.rb

* ​​Rails 5 introduces the ActionController::Renderer class as a utility for rendering arbitrary templates’ absent controller actions
* Templates are rendered in a context with supplementary data. For example, if a view template needs to create a URL, how will it know what hostname to user whether to use SSL or not

1.3.2 config/initializers/assets.rb

* ​​The asset pipeline has a number of settings that allow you to customize its behavior

1.3.3 config/initializers/backtrace_silencers.rb

* ​​Rails gives us a built in mechanism for reducing the size of backtraces by eliminating likes that don’t really add anything to your debugging efforts

1.3.4 config/initializers/cookies_serializer.rb

* This setting controls how Rails handles serialization of string-based key-value pairs as they become browser cookies

1.3.5 config/initializers/filter_parameter_logging.rb

* ​​When a request is made to your application, by default, Rails will log details such as the request path, HTTP method, IP address, and parameters
* This setting lets you specify what request parameters should be filtered from your log files
* A filtered param will look like [FILTERED] in the logs

1.3.6 config/initializers/inflections.rb

* Rails has a class named Inflector whose job is to transform strings from singular to plural, class names to table names, modularized class names to ones without, and class names to foreign keys, etc
* Most of the time, the Inflector class does a decent job of figuring out the pluralized table name for a given class, but occasionally it won’t
    * You can use the rails console to test out how the Inflector class will affect a word
* This setting allows you to add custom rules using regex to add custom pluralizations or singularization

1.3.7 config/intializers/mime_types.rb​​

* Rails supports a standard set of MIME types


* If your application needs to respond to other MIME types, you can register them in this settings file

1.3.8 config/initializers/new_framework_defaults.rb

* 



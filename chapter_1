
* Rails has always been preconfigured to include three standard modes:
    * Developement
    * Test
    * Production
* It’s also possible to create you own custom environments
* RAILS_ENV can be used to determine the current environment
* The most fundamental aspect of a Rails app is its list of external libraries it depends on
    * Bundler is a tool that is used to manage RubyGem dependencies for Rails
    * Takes a manifest file as input and is able to fetch, download, and install the gems that are listed in the manifest


1.1 Bundler

* One of the most important thing Bundler does is dependent resolution on the fill list of gems specified In your configuration, all at once.
    * Different from the “one-at-a-time” dependency approach employed by previous versions of Rails
* Bundler will often solve dependency issues by evaluating dependencies all at once and figuring out the exact right versions of gems to load.

1.1.1 Gemfile

* It is the root of the Rails project directory
* No filename extension
* Specifies all dependencies of the Rails app, including the version of Rails being used
* It is possible to load a dependency for a specific environment by placing it in a group block and specifying one or more environment names as symbols

group :development do
    gem ‘byebug’
end

group :test do
    gem ‘capybara’
    gem ‘database_cleaner’
end

group :development, :test do
    gem ‘rspec-rails’
    gem ‘factory_bot_rails’
end

* The ‘gem’ directive can take an optional second argument that will specify the version of the RubyGem desired
    * Leaving the version off will get the latest available stable version, which may or may not be the latest version
    * Using the :require option solves declaring the gem directly in the Gemfile
        * ~> will install any gem with a minor update 1.0.X
        * >= will install any gem above specified version 

1.1.1.1 Loading Gems Directly from a Git Repository

* Most gem are loaded from https://rubygems.org but it is possible to specify a gem by its source repository as long as it has a .gemspec file in the root directory
    * Just add a :git option

gem ‘carrierwave’, git: ‘git@github.com:carrierwaveuploader/carrierwave.git'

* If the gem source repo is hosted on GitHub and is public, you can use the :GitHub shorthand

gem ‘carrierwave’, github: ‘carrierwaveuploader/carrierwave'

* If there is no .gemspec file, you must tell Bundler which version to use when resolving dependencies

gem ‘deep_merge’, ‘1.0’, git: ‘git://github.com/peritor/deep_merge.git'

* Additionally, you can specify that a git repo should use a particular ref, branch, or tag as options to the git directive

git ‘git://github.com/rails/rails.git',
    ref: ‘4aded’

git ‘git://github.com/rails/rails.git',
    branch: ‘3-2-stable’

git ‘git://github.com/rails/rails.git',
    tag: ‘v3.2.11'
    
1.1.2 Installing Gems

* Every time you modify the Gemfile or if you introduce dependencies not yet installed, use the bundle install (bundle) command to ensure all dependencies are resolved for your application
* Using the install command updates all dependencies in your Gemfile to the latest versions that do not conflict with other dependencies. This command is invoked automatically when creating a new Rails app.
* The first time you run bundle install, no Gemfile.lock exists yet. Bundler will fetch all remote sources, then resolve dependencies, then install needed gems
* Rerunning bundle install without updating the Gemfile will cause Bundler to re-fetch all remote sources, but then use the dependencies specified in the Gemfile.lock instead of resolving dependencies again. Typically, this doesn’t change anything with your Rails configuration
* Lastly, and most commonly, is that the Gemfile.lock exists, and you update your Gemfile by adding or modifying a dependency. When rerunning bundle install, the dependencies specified in the Gemfile.lock will be used for the gems that did not change, but dependencies will be resolved for any gems that were updated

1.1.3 Gem Locking

* Every time you run bundle install or bundle update, Bundler calculates the dependency tree for your application and stores the result in a file called Gemlock.file
* Once this file is created, Bundler will only load specific versions of Gems that you were using the moment the Gemfile.lock was created
* The idea is that you lock your configuration down to using versions of dependencies that you know will work well with your application
* It is IMPORTANT that the Gemfile.lock is checked into version control to ensure that every machine running the application uses the exact same version of gem

1.1.4 Packaging Gems

* It is possible to package your gems in vendor/cache directory inside of your Rails app

$ bundle package

* Running the bundle install —local in an application with packed gems will use the gems in the package and skip connecting to rubygems.org or any other gem sources
    * You can use this to avoid external dependencies at the time of reply or if you depend on private gems that are not available in any public repositories

1.1.5 Binstubs

* Bootstrapping or creating a new Rails app will result in the creation of binstubs for Rails executables, located in the bin folder.
* A binstub is a script containing an executable that runs in the context of the bundle.
    * This means that you do not need to prefix bundle exec each time a Rails specific executable is invoked or used
    * You will still need to use bundle exec when using non-Rails scripts to get a properly initialized RubyGems environment
* You can add a binstub of a commonly used executable or command in your bundle by using:

$ bundle binstubs some-gem-name

Ex:
$ bundle binstubs guard

* http://www.singhajit.com/why-arent-you-using-binstubs-yet/
* https://mislav.net/2013/01/understanding-binstubs/

